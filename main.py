import os
from openai import OpenAI
from fastapi import FastAPI, Response, Form

# Configuration
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
RAILWAY_URL = os.getenv("RAILWAY_URL", "agentvocal-production.up.railway.app")

client = OpenAI(api_key=OPENAI_API_KEY)
print("‚úÖ Assistant vocal naturel avec OpenAI pr√™t !")

app = FastAPI()

# Variable globale pour stocker les r√©ponses IA
conversation_responses = {}

@app.get("/")
def root():
    return {"status": "OK", "message": "Assistant vocal naturel actif"}

@app.post("/incoming-call")
def incoming_call():
    """Point d'entr√©e pour les appels Twilio"""
    print("üìû Appel re√ßu - conversation naturelle")
    
    twiml = f'''<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Say voice="alice" language="fr-FR">
        Bonjour ! Comment puis-je vous aider aujourd'hui ?
    </Say>
    <Record 
        action="https://{RAILWAY_URL}/process-voice"
        method="POST"
        maxLength="20"
        timeout="3"
        finishOnKey="#"
        transcribe="true"
        transcribeCallback="https://{RAILWAY_URL}/handle-response"
        playBeep="false"
    />
    <Say voice="alice" language="fr-FR">
        Je n'ai pas bien entendu. N'h√©sitez pas √† me rappeler !
    </Say>
    <Hangup/>
</Response>'''
    
    return Response(content=twiml, media_type="application/xml")

@app.post("/process-voice")
def process_voice(RecordingUrl: str = Form(...), CallSid: str = Form(...)):
    """Traite l'enregistrement vocal"""
    print(f"üéµ Enregistrement re√ßu: {RecordingUrl} pour l'appel {CallSid}")
    
    twiml = '''<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Say voice="alice" language="fr-FR">
        Un instant, je r√©fl√©chis √† votre question...
    </Say>
    <Pause length="3"/>
    <Redirect>/give-ai-response</Redirect>
</Response>'''
    
    return Response(content=twiml, media_type="application/xml")

@app.post("/handle-response")
def handle_response(
    TranscriptionText: str = Form(...), 
    CallSid: str = Form(...),
    RecordingUrl: str = Form(...)
):
    """Re√ßoit la transcription et g√©n√®re une r√©ponse IA naturelle"""
    global conversation_responses
    
    print(f"üìù Transcription re√ßue: '{TranscriptionText}' pour l'appel {CallSid}")
    
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system", 
                    "content": """Tu es un assistant t√©l√©phonique fran√ßais tr√®s naturel et chaleureux.
                    Tu parles comme une vraie personne au t√©l√©phone, pas comme un robot.
                    Utilise un ton conversationnel et amical.
                    R√©ponds de mani√®re concise (2-3 phrases max) car c'est au t√©l√©phone.
                    √âvite les mots techniques ou robotiques.
                    Si la question n'est pas claire, demande poliment de pr√©ciser.
                    Tu peux aider avec des informations g√©n√©rales, des conseils pratiques.
                    Pour des tarifs sp√©cifiques, propose de chercher ou de rappeler."""
                },
                {
                    "role": "user", 
                    "content": TranscriptionText
                }
            ],
            max_tokens=80,
            temperature=0.8
        )
        
        ai_response = response.choices[0].message.content.strip()
        
        # Nettoyer la r√©ponse pour qu'elle soit plus naturelle
        ai_response = ai_response.replace("assistant", "")
        ai_response = ai_response.replace("intelligence artificielle", "")
        ai_response = ai_response.replace("IA", "")
        
        # Stocker la r√©ponse pour cet appel
        conversation_responses[CallSid] = ai_response
        
        print(f"ü§ñ R√©ponse IA pour {CallSid}: {ai_response}")
        
        return {"status": "success", "response": ai_response, "call_sid": CallSid}
        
    except Exception as e:
        print(f"‚ùå Erreur OpenAI pour {CallSid}: {e}")
        fallback = "Je n'ai pas bien compris votre question. Pouvez-vous reformuler ?"
        conversation_responses[CallSid] = fallback
        return {"status": "error", "response": fallback, "error": str(e)}

@app.get("/give-ai-response")
def give_ai_response(CallSid: str = None):
    """Donne la r√©ponse IA vocalement de fa√ßon naturelle"""
    global conversation_responses
    
    # R√©cup√©rer la r√©ponse pour cet appel
    ai_response = "D√©sol√©, je n'ai pas pu traiter votre demande."
    
    # Chercher la r√©ponse la plus r√©cente si pas de CallSid
    if CallSid and CallSid in conversation_responses:
        ai_response = conversation_responses[CallSid]
        # Nettoyer apr√®s usage
        del conversation_responses[CallSid]
    elif conversation_responses:
        # Prendre la derni√®re r√©ponse
        last_call = list(conversation_responses.keys())[-1]
        ai_response = conversation_responses[last_call]
        del conversation_responses[last_call]
    
    print(f"üéôÔ∏è R√©ponse vocale: {ai_response}")
    
    twiml = f'''<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Say voice="alice" language="fr-FR" rate="0.9">{ai_response}</Say>
    <Pause length="1"/>
    <Say voice="alice" language="fr-FR" rate="0.9">
        Y a-t-il autre chose que je puisse faire pour vous ?
    </Say>
    <Record 
        action="https://{RAILWAY_URL}/process-followup"
        method="POST"
        maxLength="15"
        timeout="3"
        finishOnKey="#"
        transcribe="true"
        playBeep="false"
    />
    <Say voice="alice" language="fr-FR">
        Tr√®s bien ! Bonne journ√©e et √† bient√¥t !
    </Say>
    <Hangup/>
</Response>'''
    
    return Response(content=twiml, media_type="application/xml")

@app.post("/process-followup")
def process_followup(RecordingUrl: str = Form(...), CallSid: str = Form(...)):
    """G√®re les questions de suivi"""
    print(f"üîÑ Question de suivi re√ßue pour {CallSid}")
    
    twiml = '''<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Say voice="alice" language="fr-FR">
        Parfait, je regarde √ßa tout de suite...
    </Say>
    <Pause length="2"/>
    <Redirect>/give-ai-response</Redirect>
</Response>'''
    
    return Response(content=twiml, media_type="application/xml")

@app.post("/test-ai")
def test_ai(question: str = Form(...)):
    """Test direct de l'IA"""
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Tu es un assistant t√©l√©phonique fran√ßais naturel et amical."},
                {"role": "user", "content": question}
            ],
            max_tokens=80,
            temperature=0.8
        )
        return {"question": question, "response": response.choices[0].message.content}
    except Exception as e:
        return {"error": str(e)}
